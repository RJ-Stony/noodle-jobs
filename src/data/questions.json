{
  "categories": {
    "os": {
      "id": "OS",
      "name": "운영체제",
      "description": "프로세스, 스레드, 메모리 등 완벽하게 씹어먹자",
      "icon": "ComputerDesktopIcon"
    },
    "network": {
      "id": "Network",
      "name": "네트워크",
      "description": "네트워크는 결국 사랑일까...?",
      "icon": "GlobeAltIcon"
    },
    "database": {
      "id": "DB",
      "name": "데이터베이스",
      "description": "SQL로 면접관 마음도 조인해버리기",
      "icon": "CircleStackIcon"
    },
    "algorithm": {
      "id": "Algorithm",
      "name": "자료구조와 알고리즘",
      "description": "기본 자료구조와 알고리즘 문제 해결 전략들",
      "icon": "CodeBracketIcon"
    },
    "architecture": {
      "id": "Architecture",
      "name": "시스템 아키텍처",
      "description": "MSA? 디자인 패턴? 이제는 면접에서 말할 차례",
      "icon": "CubeIcon"
    }
  },
  "questions": {
    "q1": {
      "id": "q1",
      "title": "프로세스와 스레드는 어떻게 다른가요?",
      "categoryId": "OS",
      "content": "",
      "answer": "프로세스는 실행 중인 프로그램의 인스턴스로, 독립적인 메모리 공간을 가지며 OS에 의해 자원(메모리, 파일 등)이 할당됩니다. 반면 스레드는 프로세스 내의 작업 단위로, 동일한 메모리 공간을 여러 스레드가 공유합니다. 따라서 스레드는 생성 비용이 적고 통신이 빠르지만, 하나의 스레드 오류가 전체 프로세스에 영향을 줄 수 있습니다.",
      "createdAt": "2025-04-14T02:42:25.998105Z",
      "updatedAt": "2025-04-14T02:42:25.998105Z"
    },
    "q2": {
      "id": "q2",
      "title": "컨텍스트 스위칭(Context Switching)이란 무엇인가요?",
      "categoryId": "OS",
      "content": "",
      "answer": "컨텍스트 스위칭은 CPU가 현재 실행 중인 프로세스나 스레드의 상태(context)를 저장하고, 다른 작업의 상태를 불러오는 과정을 말합니다. 이 과정은 오버헤드를 발생시키며, 너무 빈번하면 성능 저하의 원인이 됩니다. OS는 효율적인 스케줄링을 위해 이 작업을 빠르게 처리할 수 있어야 합니다.",
      "createdAt": "2025-04-14T02:42:25.998105Z",
      "updatedAt": "2025-04-14T02:42:25.998105Z"
    },
    "q3": {
      "id": "q3",
      "title": "멀티스레딩의 장단점은 무엇인가요?",
      "categoryId": "OS",
      "content": "",
      "answer": "멀티스레딩은 하나의 프로세스 내에서 여러 작업을 병렬적으로 수행할 수 있어 자원을 효율적으로 활용할 수 있는 장점이 있습니다. 하지만 스레드 간 동기화 문제, 데드락 발생 가능성 등 복잡한 제어가 필요하다는 단점도 존재합니다.",
      "createdAt": "2025-04-14T02:42:25.998105Z",
      "updatedAt": "2025-04-14T02:42:25.998105Z"
    },
    "q4": {
      "id": "q4",
      "title": "TCP와 UDP의 차이점은 무엇인가요?",
      "categoryId": "Network",
      "content": "",
      "answer": "TCP는 연결 지향적(3-way handshake)이며, 데이터의 신뢰성과 순서를 보장합니다. 반면 UDP는 비연결형으로 속도는 빠르지만 데이터 손실이 발생할 수 있으며 신뢰성을 보장하지 않습니다. 예: TCP는 웹 브라우징, UDP는 스트리밍에 적합합니다.",
      "createdAt": "2025-04-14T02:42:25.998105Z",
      "updatedAt": "2025-04-14T02:42:25.998105Z"
    },
    "q5": {
      "id": "q5",
      "title": "3-way Handshake란 무엇인가요?",
      "categoryId": "Network",
      "content": "",
      "answer": "TCP에서 연결을 수립할 때 사용하는 방식으로, 클라이언트가 SYN, 서버가 SYN-ACK, 클라이언트가 ACK을 보내는 총 세 번의 패킷 교환으로 이루어집니다. 이를 통해 연결을 안정적으로 수립할 수 있습니다.",
      "createdAt": "2025-04-14T02:42:25.998105Z",
      "updatedAt": "2025-04-14T02:42:25.998105Z"
    },
    "q6": {
      "id": "q6",
      "title": "HTTP와 HTTPS의 차이는 무엇인가요?",
      "categoryId": "Network",
      "content": "",
      "answer": "HTTPS는 HTTP에 SSL/TLS 암호화 계층을 추가한 프로토콜입니다. HTTPS는 데이터를 암호화하여 전송하기 때문에 중간자 공격이나 도청에 대한 보안이 강화됩니다. 포트 번호도 HTTP는 80, HTTPS는 443을 사용합니다.",
      "createdAt": "2025-04-14T02:42:25.998105Z",
      "updatedAt": "2025-04-14T02:42:25.998105Z"
    },
    "q7": {
      "id": "q7",
      "title": "SQL과 NoSQL의 차이점은 무엇인가요?",
      "categoryId": "DB",
      "content": "",
      "answer": "SQL은 관계형 데이터베이스(RDBMS)를 의미하며, 고정된 스키마와 SQL 언어를 사용합니다. 반면 NoSQL은 비정형 데이터를 유연하게 저장하며, 문서, 키-값, 컬럼 기반 등 다양한 형태가 있습니다. 예: MySQL vs MongoDB.",
      "createdAt": "2025-04-14T02:42:25.998105Z",
      "updatedAt": "2025-04-14T02:42:25.998105Z"
    },
    "q8": {
      "id": "q8",
      "title": "인덱스(Index)는 왜 필요한가요?",
      "categoryId": "DB",
      "content": "",
      "answer": "인덱스는 데이터베이스에서 검색 성능을 향상시키는 자료 구조입니다. 일반적으로 B-Tree를 사용하며, WHERE 절이나 JOIN, ORDER BY에 사용되는 컬럼에 인덱스를 걸면 빠른 조회가 가능합니다. 하지만 쓰기 성능에는 영향을 줄 수 있습니다.",
      "createdAt": "2025-04-14T02:42:25.998105Z",
      "updatedAt": "2025-04-14T02:42:25.998105Z"
    },
    "q9": {
      "id": "q9",
      "title": "트랜잭션이란 무엇이고 ACID란?",
      "categoryId": "DB",
      "content": "",
      "answer": "트랜잭션은 데이터베이스의 논리적 작업 단위입니다. ACID는 트랜잭션의 4대 특성으로 원자성(Atomicity), 일관성(Consistency), 고립성(Isolation), 지속성(Durability)을 의미합니다. 이는 데이터의 무결성과 신뢰성을 보장합니다.",
      "createdAt": "2025-04-14T02:42:25.998105Z",
      "updatedAt": "2025-04-14T02:42:25.998105Z"
    },
    "q13": {
      "id": "q13",
      "title": "Monolithic과 MSA의 차이는?",
      "categoryId": "Architecture",
      "content": "",
      "answer": "Monolithic은 모든 기능이 하나의 애플리케이션에 포함된 구조입니다. MSA(Microservice Architecture)는 기능을 작고 독립된 서비스로 나눠 배포와 유지보수를 용이하게 합니다. MSA는 복잡도와 운영 비용이 증가하지만 유연성이 큽니다.",
      "createdAt": "2025-04-14T02:42:25.998105Z",
      "updatedAt": "2025-04-14T02:42:25.998105Z"
    },
    "q14": {
      "id": "q14",
      "title": "로드 밸런싱이란?",
      "categoryId": "Architecture",
      "content": "",
      "answer": "로드 밸런싱은 여러 서버에 요청을 분산시켜 시스템 부하를 고르게 만드는 기술입니다. L4는 포트 기준, L7은 애플리케이션 레벨에서 로드 밸런싱을 수행합니다. 대표적 알고리즘은 라운드로빈, Least Connection 등이 있습니다.",
      "createdAt": "2025-04-14T02:42:25.998105Z",
      "updatedAt": "2025-04-14T02:42:25.998105Z"
    },
    "q15": {
      "id": "q15",
      "title": "REST API란 무엇인가요?",
      "categoryId": "Architecture",
      "content": "",
      "answer": "REST는 자원을 URI로 표현하고, HTTP 메서드(GET, POST, PUT, DELETE 등)를 통해 자원을 처리하는 방식입니다. 상태 비저장성(stateless), 일관된 인터페이스 등의 특징을 가지며, 클라이언트-서버 구조에 적합합니다.",
      "createdAt": "2025-04-14T02:42:25.998105Z",
      "updatedAt": "2025-04-14T02:42:25.998105Z"
    }
  }
}
